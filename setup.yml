- name: "Install awx server"
  hosts: 127.0.0.1
  connection: local
  vars_files:
    - vars.yml
  tasks:
  - name: "Check if awx is already cloned"
    stat: 
      path: "{{ awx_location }}"
    register: awx_cloned
  - name: "Clone awx repository. Patience please. It is over 200 MB"
    git: repo=https://github.com/ansible/awx.git dest={{ awx_location }}
    when: not awx_cloned.stat.exists
  - name: "Add postgres hostname"
    lineinfile:
      path: "{{ awx_location }}/installer/inventory"
      regexp: ".*pg_hostname.*"
      line: "pg_hostname={{ pg_hostname }}"
  - name: "Add postgres username"
    lineinfile:
      path: "{{ awx_location }}/installer/inventory"
      regexp: ".*pg_username.*"
      line: "pg_username={{ pg_username }}"
  - name: "Add postgres password"
    lineinfile:
      path: "{{ awx_location }}/installer/inventory"
      regexp: ".*pg_password.*"
      line: "pg_password={{ pg_password }}"
  - name: "Add postgres database"
    lineinfile:
      path: "{{ awx_location }}/installer/inventory"
      regexp: ".*pg_database.*"
      line: "pg_database={{ pg_database }}"
  - name: "Add postgres port"
    lineinfile:
      path: "{{ awx_location }}/installer/inventory"
      regexp: ".*pg_port.*"
      line: "pg_port={{ pg_port }}"
  - name: "Link awx only to local port"
    lineinfile:
      path: "{{ awx_location }}/installer/inventory"
      regexp: ".*host_port.*"
      line: "host_port=127.0.0.1:80"
  - name: "Update apt"
    apt: update_cache=yes
    become: yes
  - name: "Install postgresql"
    become: yes
    apt: name={{ item }}
    with_items:
      - postgresql
      - libpq-dev
      - python-psycopg2
  - name: "Create database"
    become: yes
    become_user: postgres
    postgresql_db: name={{ pg_database }}
    when: install_local_postgres|default(False)
    with_items: install_local_postgres
  - name: "Grant user access"
    become: yes
    become_user: postgres
    postgresql_user: db={{ pg_database }} name={{ pg_username }} password= {{ pg_password }} priv=ALL
    when: install_local_postgres|default(False)
    with_items: install_local_postgres
  - name: "Create sensor database"
    become: yes
    become_user: postgres
    postgresql_db: name={{ pg_sensors_database }}
    when: install_local_postgres|default(False)
    with_items: install_local_postgres
  - name: "Grant user access to sensor database"
    become: yes
    become_user: postgres
    postgresql_user: db={{ pg_sensors_database }} name={{ pg_sensors_username }} password={{ pg_sensors_password }} priv=ALL
    when: install_local_postgres|default(False)
    with_items: install_local_postgres
  - name: "Add ssl access only for sensors database"
    become: yes
    lineinfile: 
      path: /etc/postgresql/9.5/main/pg_hba.conf
      regexp: ".*hostssl.*"
      line: "hostssl {{ pg_sensors_database }} {{ pg_sensors_username }} 0.0.0.0/0 md5"
    notify: restart postgresql 
    when: install_local_postgres|default(False)
    with_items:  install_local_postgres
  - name:  "Add access from external ips"
    become: yes
    lineinfile:
      path:  /etc/postgresql/9.5/main/postgresql.conf
      regexp: ".*listen_addresses.*"
      line: "listen_addresses = '*'"
    notify: restart postgresql
    when: install_local_postgres|default(False)
    with_items: install_local_postgres
  - name:
    file:
      path: ./keys/nginx
      state: directory
  - name: "Generate SSH keys"
    shell: ssh-keygen -b 2048 -t rsa -f ./keys/awx -q -N ""
    args:
      creates: ./keys/awx
  - name: "Generate private key for nginx"
    openssl_privatekey:
      path: ./keys/nginx/awx.local.pem
  - name: "Generate CSR"
    openssl_csr:
      path: ./keys/nginx/awx.local.csr
      privatekey_path: ./keys/nginx/awx.local.pem
      common_name: "awx.local"
  - name: "Generate public key for nginx"
    openssl_certificate:
      path: ./keys/nginx/awx.local.pub.pem
      privatekey_path: ./keys/nginx/awx.local.pem
      csr_path: ./keys/nginx/awx.local.csr
      provider: selfsigned
  handlers:
  - name: restart postgresql
    service:
      name: postgresql.service
      state: restarted
